service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

# Request schema
# https://itnext.io/how-to-validate-http-requests-before-they-reach-lambda-2fff68bfe93b

# This does not work on my local machine
# Whenever I try to turn this on, I have the following error:
# FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory
#package:
  #individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret
    TODOS_TABLE: ToDos-${self:provider.stage}
    JOBS_TABLE: Jobs-${self:provider.stage}
    AUDIENCE_SECRET_ID: Audience-${self:provider.stage}
    AUDIENCE_FIELD: Audience
    UPLOAD_SECRET_ID: UploadSecret-${self:provider.stage}
    UPLOAD_SECRET_FIELD: UploadSecret
    UPLOAD_ACCESS_ID: UploadAccess-${self:provider.stage}
    UPLOAD_ACCESS_FIELD: UploadAccess
    AUTH_URL: https://dev-gfdym553.auth0.com/

  iamRoleStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Audience
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref UploadSecret
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref UploadAccess
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn
    - Effect: Allow # xray permissions (required)
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - "*"

custom:
  documentation:
    api:
      info:
        version: '1.0.0'
        title: ToDo App API
        description: APIs for serverless ToDo App
    models:
      - name: CreateToDoRequest
        contentType: application/json
        schema: ${file(models/create-to-do-request.json)}
      - name: UpdateToDoRequest
        contentType: application/json
        schema: ${file(models/update-to-do-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth

  GetJobs:
    handler: src/lambda/http/getJobs.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}
    events:
      - http:
          method: get
          path: jobs
          cors: true
          authorizer: Auth

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            summary: Create a new to do item
            description: Create a new todo item
            requestModels:
              'application/json': CreateToDoRequest

  CreateJob:
    handler: src/lambda/http/createJob.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}
    events:
      - http:
          method: post
          path: jobs
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-job-request.json)}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/update-to-do-request.json)}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth

  DeleteJob:
    handler: src/lambda/http/deleteJob.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}
    events:
      - http:
          method: delete
          path: jobs/{jobId}
          cors: true
          authorizer: Auth

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth

resources:
  Resources:
    ToDoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}

    JobsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: jobId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: jobId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.JOBS_TABLE}

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET, OPTIONS, POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - ':'
                    - - 'arn:aws:iam:'
                      - Ref: AWS::AccountId
                      - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey

    Audience:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUDIENCE_SECRET_ID}
        Description: Audience (Auth0 Client ID)
        KmsKeyId: !Ref KMSKey

    UploadSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.UPLOAD_SECRET_ID}
        Description: Secret and key for upload images
        KmsKeyId: !Ref KMSKey

    UploadAccess:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.UPLOAD_ACCESS_ID}
        Description: Secret and key for upload images
        KmsKeyId: !Ref KMSKey

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
